{"version":3,"sources":["leaflet-draw/core/leaflet-draw.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAmC,MAAM,eAAe,CAAC;AAElF,OAAO,KAAK,CAAC,MAAM,SAAS,CAAC;AAE7B,OAAO,EAAE,gBAAgB,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AAMzF,IAAa,oBAAoB;IAUhC,8BAAY,gBAAkC;QAFjB,gBAAW,GAAqC,IAAI,CAAC;QAGjF,IAAI,CAAC,gBAAgB,GAAG,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;IACvE,CAAC;IAED,uCAAQ,GAAR;QAAA,iBAoBC;QAnBA,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAE7B,8DAA8D;QAC9D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEhE,qBAAqB;QACrB,IAAI,CAAC,WAAW,GAAI,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEzD,6CAA6C;QAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC;QAEvD,6BAA6B;QAC7B,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5D,mEAAmE;QACnE,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,UAAC,CAAM;YAC9D,IAAI,KAAK,GAAI,CAA0B,CAAC,KAAK,CAAC;YAC9C,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,0CAAW,GAAX,UAAY,OAAwC;QACnD,qCAAqC;IACtC,CAAC;IAED,oDAAqB,GAArB,UAAsB,OAAyC;QAE9D,yCAAyC;QACzC,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;YACrB,OAAO,GAAG;gBACT,IAAI,EAAE,IAAI;aACV,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,IAAI,GAAG;gBACd,YAAY,EAAE,IAAI;aAClB,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvC,oEAAoE;YACpE,OAAO,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC;YAC7C,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IACF,2BAAC;AAAD,CA7DA,AA6DC,IAAA;AArD6B;IAA5B,KAAK,CAAC,oBAAoB,CAAC;;yDAAsD;AARtE,oBAAoB;IAHhC,SAAS,CAAC;QACV,QAAQ,EAAE,eAAe;KACzB,CAAC;qCAW6B,gBAAgB;GAVlC,oBAAoB,CA6DhC;SA7DY,oBAAoB","file":"leaflet-draw.directive.js","sourcesContent":["import { Directive, Input, OnChanges, OnInit, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\n\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/angular2-leaflet';\n\n\n@Directive({\n\tselector: '[leafletDraw]'\n})\nexport class LeafletDrawDirective\n\timplements OnChanges, OnInit {\n\n\tleafletDirective: LeafletDirectiveWrapper;\n\n\tdrawControl: L.Control.Draw;\n\tfeatureGroup: L.FeatureGroup;\n\n\t@Input('leafletDrawOptions') drawOptions: L.Control.DrawConstructorOptions = null;\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t}\n\n\tngOnInit() {\n\t\tthis.leafletDirective.init();\n\n\t\t// Initialize the draw options (in case they weren't provided)\n\t\tthis.drawOptions = this.initializeDrawOptions(this.drawOptions);\n\n\t\t// Create the control\n\t\tthis.drawControl =  new L.Control.Draw(this.drawOptions);\n\n\t\t// Pull out the feature group for convenience\n\t\tthis.featureGroup = this.drawOptions.edit.featureGroup;\n\n\t\t// Add the control to the map\n\t\tthis.leafletDirective.getMap().addControl(this.drawControl);\n\n\t\t// Register the main handler for events coming from the draw plugin\n\t\tthis.leafletDirective.getMap().on(L.Draw.Event.CREATED, (e: any) => {\n\t\t\tlet layer = (e as L.DrawEvents.Created).layer;\n\t\t\tthis.featureGroup.addLayer(layer);\n\t\t});\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\t\t// No changes being handled currently\n\t}\n\n\tinitializeDrawOptions(options: L.Control.DrawConstructorOptions) {\n\n\t\t// Ensure the options have a featureGroup\n\t\tif (null == options) {\n\t\t\toptions = {\n\t\t\t\tedit: null\n\t\t\t};\n\t\t}\n\t\tif (null == options.edit) {\n\t\t\toptions.edit = {\n\t\t\t\tfeatureGroup: null\n\t\t\t};\n\t\t}\n\t\tif (null == options.edit.featureGroup) {\n\t\t\t// No feature group was provided, so we're going to add it ourselves\n\t\t\toptions.edit.featureGroup = L.featureGroup();\n\t\t\tthis.leafletDirective.getMap().addLayer(options.edit.featureGroup);\n\t\t}\n\n\t\treturn options;\n\t}\n}\n"]}